(()=>{"use strict";class e{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}function t(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}var n;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(n||(n={}));class r{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.people=r,this.status=s}}class s{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}class i extends s{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new i),this.instance}addProject(e,t,s){const i=new r(Math.random().toString(),e,t,s,n.Active);this.projects.push(i),this.updateListeners()}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}moveProject(e,t){const n=this.projects.find((t=>t.id===e));n&&n.status!==t&&(n.status=t,this.updateListeners())}}const o=i.getInstance();class l extends e{constructor(){super("project-input","app",!0,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.configure(),this.renderContent()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}getUserInput(){const e=this.titleInputElement.value,t=this.descriptionInputElement.value,n=+this.peopleInputElement.value,r=[{value:e,required:!0,minLength:3},{value:t,required:!0,minLength:3},{value:n,required:!0,min:1}];let s=!0;for(let e of r)s=s&&!((i=e).required&&0===i.value.toString().trim().length||i.minLength&&"string"==typeof i.value&&i.value.trim().length<i.minLength||i.maxLength&&"string"==typeof i.value&&i.value.trim().length>i.maxLength||i.min&&"number"==typeof i.value&&i.value<i.min||i.max&&"number"==typeof i.value&&i.value>i.max);var i;if(s)return[e,t,n];alert("Invalid input.")}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.getUserInput();if(Array.isArray(t)){const[e,n,r]=t;o.addProject(e,n,r),this.clearInputs(),console.log(e)}}}!function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);i>3&&o&&Object.defineProperty(t,n,o)}([t],l.prototype,"submitHandler",null);var a=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class c extends e{get people(){return 1===this.project.people?"1 person":`${this.project.people} people`}constructor(e,t){super("single-project",e,!1,t.id),this.hostId=e,this.project=t,this.configure(),this.renderContent()}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.people,this.element.querySelector("p").textContent=this.project.description}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){}}a([t],c.prototype,"dragStartHandler",null),a([t],c.prototype,"dragEndHandler",null);var d,p=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class u extends e{constructor(e){super("project-list","app",!1,`${e}-projects`),this.projectType=e,this.assignedProjects=[],this.configure(),this.renderContent()}renderContent(){const e=`${this.projectType}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.projectType.toUpperCase()+" PROJECTS"}configure(){o.addListener((e=>{this.assignedProjects=e.filter((e=>"active"===this.projectType?e.status===n.Active:e.status===n.Finished)),this.renderProjects()})),this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler)}renderProjects(){this.element.querySelector("ul").innerHTML="";for(const e of this.assignedProjects)new c(this.element.querySelector("ul").id,e)}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const t=e.dataTransfer.getData("text/plain");o.moveProject(t,"active"===this.projectType?n.Active:n.Finished),console.log(t)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}}p([t],u.prototype,"dragOverHandler",null),p([t],u.prototype,"dropHandler",null),p([t],u.prototype,"dragLeaveHandler",null),d||(d={}),new l,new u("active"),new u("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,